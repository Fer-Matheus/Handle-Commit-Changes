: "diff --git a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\nindex b2ad0465161..0da38301d8f 100644\n--- a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\n+++ b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\n@@ -202,7 +202,7 @@ public final class GraalOptions {\n     public static final OptionValue<Boolean> HotSpotPrintInlining = new OptionValue<>(false);\n \n     // Register allocator debugging\n-    @Option(help = \"Comma separated list of register that the allocation is limited to.\", type = OptionType.Debug)\n+    @Option(help = \"Comma separated list of registers that register allocation is limited to.\", type = OptionType.Debug)\n     public static final OptionValue<String> RegisterPressure = new OptionValue<>(null);\n \n     @Option(help = \"\", type = OptionType.Debug)\ndiff --git a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\nindex 4f7cf4220df..5896fc77b6c 100644\n--- a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\n+++ b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\n@@ -23,6 +23,7 @@\n package com.oracle.graal.replacements;\n \n import static com.oracle.graal.api.code.MemoryBarriers.*;\n+import static com.oracle.graal.compiler.common.GraalOptions.*;\n \n import java.lang.reflect.*;\n import java.util.*;\n@@ -96,17 +97,23 @@ public class StandardGraphBuilderPlugins {\n     }\n \n     private static void registerStringPlugins(InvocationPlugins plugins) {\n-        Registration r = new Registration(plugins, String.class);\n-        r.registerMethodSubstitution(StringSubstitutions.class, \"equals\", Receiver.class, Object.class);\n-\n-        r = new Registration(plugins, StringSubstitutions.class);\n-        r.register1(\"getValue\", String.class, new InvocationPlugin() {\n-            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n-                ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);\n-                b.addPush(new LoadFieldNode(value, field));\n-                return true;\n-            }\n-        });\n+        /*\n+         * AMD64's String.equals substitution needs about 8 registers so we disable it if there is\n+         * some artificial register pressure.\n+         */\n+        if (RegisterPressure.getValue() == null) {\n+            Registration r = new Registration(plugins, String.class);\n+            r.registerMethodSubstitution(StringSubstitutions.class, \"equals\", Receiver.class, Object.class);\n+\n+            r = new Registration(plugins, StringSubstitutions.class);\n+            r.register1(\"getValue\", String.class, new InvocationPlugin() {\n+                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n+                    ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);\n+                    b.addPush(new LoadFieldNode(value, field));\n+                    return true;\n+                }\n+            });\n+        }\n     }\n \n     private static void registerArraysPlugins(InvocationPlugins plugins) {",