: "diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java\nindex a8c5f901f1f..36a6200ec0b 100644\n--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java\n+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java\n@@ -74,13 +74,6 @@ public class MasterUtil\n     \n     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )\n     {\n-        if ( Config.osIsWindows() )\n-        {\n-            throw new UnsupportedOperationException(\n-                \"Streaming store files live (as used in HA and backup) \"\n-                    + \"isn't supported on Windows due to limitations in OS/filesystem\" );\n-        }\n-\n         File baseDir = getBaseDir( graphDb );\n         XaDataSourceManager dsManager =\n                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();\ndiff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\nindex 7d55c553e4d..cb4acdf5391 100644\n--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\n+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\n@@ -91,7 +91,6 @@ public class TestBackup\n     @Test\n     public void fullThenIncremental() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );\n         ServerInterface server = startServer( serverPath );\n         OnlineBackup backup = OnlineBackup.from( \"localhost\" );\n@@ -109,7 +108,6 @@ public class TestBackup\n     @Test\n     public void makeSureStoreIdIsEnforced() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         // Create data set X on server A\n         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );\n         ServerInterface server = startServer( serverPath );\ndiff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\nindex 4ee63dbf284..d067458ef8e 100644\n--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\n+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\n@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.neo4j.graphdb.GraphDatabaseService;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.EmbeddedGraphDatabase;\n \n public class TestConfiguration\n@@ -85,7 +84,6 @@ public class TestConfiguration\n     @Test\n     public void testEnableDefaultsInConfig() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         GraphDatabaseService db = newDb( \"true\" );\n         OnlineBackup.from( \"localhost\" ).full( BACKUP_DIR );\n         db.shutdown();\n@@ -94,7 +92,6 @@ public class TestConfiguration\n     @Test\n     public void testEnableCustomPortInConfig() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         int customPort = 12345;\n         GraphDatabaseService db = newDb( \"port=\" + customPort );\n         try\ndiff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java\nindex 969983f97df..f3cc6d9055e 100644\n--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java\n+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java\n@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;\n import org.neo4j.graphdb.RelationshipType;\n import org.neo4j.helpers.collection.IteratorUtil;\n import org.neo4j.helpers.collection.MapUtil;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.ha.Broker;\n import org.neo4j.kernel.ha.BrokerFactory;\n \n@@ -393,7 +392,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void slaveCreateNode() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 3, 2, 2, 2, 0, 0 );\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );\n@@ -402,7 +400,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMultipleSlaves() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 1, 1, 0, 0 );\n         initializeDbs( 3 );\n         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );\n@@ -415,7 +412,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMasterFailure() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(\n                 getMasterShutdownDispatcher() ), 0 );\n@@ -429,7 +425,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testSlaveConstraintViolation() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 0, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -443,7 +438,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMasterConstraintViolation() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 1, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -458,7 +452,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testGetRelationships() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 3, 2, 0, 0, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -475,7 +468,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNoTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 0, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -488,7 +480,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNodeDeleted() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 1, 0, 0, 0, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -503,7 +494,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testDeadlock() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 2 );\n \n         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );\n@@ -526,7 +516,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void createNodeAndIndex() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 0, 1, 0, 1, 0 );\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.CreateNodeAndIndexJob( \"name\", \"Neo\" ), 0 );\n@@ -535,7 +524,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void indexingAndTwoSlaves() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 2 );\n         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( \"name\", \"Morpheus\" ) );\n         pullUpdates();\n@@ -548,7 +536,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNewIndexFramework() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 0, 2, 0, 0, 2 );\n         initializeDbs( 2 );\n         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( \"users\",\n@@ -559,7 +546,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testLargeTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );\n     }\n@@ -567,7 +553,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testPullLargeTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );\n         pullUpdates();\n@@ -576,7 +561,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testLargeTransactionData() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );\n     }\n@@ -584,7 +568,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testPullLargeTransactionData() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );\n         pullUpdates();\n@@ -593,7 +576,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         startUpMaster( MapUtil.stringMap() );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );\n         addDb( MapUtil.stringMap() );\n@@ -604,7 +586,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void canCopyInitialDbWithLuceneIndexes() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         int additionalNodeCount = 50;\n         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );\n         startUpMaster( MapUtil.stringMap() );\ndiff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java\nindex dec1cc8f691..06d100dbc64 100644\n--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java\n+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java\n@@ -29,7 +29,6 @@ import java.util.Map;\n import org.junit.After;\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.ha.StandaloneDatabase;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.EmbeddedGraphDatabase;\n \n public class MultiJvmTest extends AbstractHaTest\n@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest\n     @After\n     public void shutdownDbsAndVerify() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         shutdownDbs();\n \n         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );\ndiff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\nindex b9806cdc7ee..018208324b9 100644\n--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\n+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\n@@ -28,7 +28,6 @@ import org.junit.After;\n import org.junit.Before;\n import org.neo4j.ha.LocalhostZooKeeperCluster;\n import org.neo4j.ha.StandaloneDatabase;\n-import org.neo4j.kernel.Config;\n \n public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n {\n@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n     @Before\n     public void startZooKeeperCluster() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );\n         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );\n     }\n@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n     @After\n     public void shutdownZooKeeperCluster()\n     {\n-        if ( Config.osIsWindows() ) return;\n         zooKeeperCluster.shutdown();\n     }\n }\ndiff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java\nindex 544c2db3373..b5eb6dead4e 100644\n--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java\n+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java\n@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest\n     @After\n     public void verifyAndShutdownDbs()\n     {\n-        if ( Config.osIsWindows() ) return;\n         try\n         {\n             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );\n@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest\n     @Test\n     public void testMixingEntitiesFromWrongDbs() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n-\n         initializeDbs( 1 );\n         GraphDatabaseService haDb1 = haDbs.get( 0 );\n         GraphDatabaseService mDb = master.getGraphDb();\ndiff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\nindex 61184920a50..e48248e2cf2 100644\n--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n@@ -25,7 +25,6 @@ import org.junit.Test;\n import org.neo4j.com.Protocol;\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.helpers.Pair;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.HighlyAvailableGraphDatabase;\n import org.neo4j.kernel.ha.AbstractBroker;\n import org.neo4j.kernel.ha.Broker;\n@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest\n     @Test\n     public void assertThatNettyIsUsed() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         assertTrue(\n                 \"Slave Broker is not a client\",\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\nindex 550752cf419..7b6805b6b49 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\n@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;\n import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;\n import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;\n import org.neo4j.kernel.impl.core.RelationshipTypeCreator;\n+import org.neo4j.kernel.impl.nioneo.store.FileLock;\n import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;\n import org.neo4j.kernel.impl.nioneo.store.IdGenerator;\n import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;\n@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;\n import org.neo4j.kernel.impl.transaction.LockManager;\n import org.neo4j.kernel.impl.transaction.TxFinishHook;\n import org.neo4j.kernel.impl.transaction.TxModule;\n+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;\n+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;\n \n@@ -139,6 +142,17 @@ public class CommonFactories\n             {\n                 return new RandomAccessFile( fileName, mode ).getChannel();\n             }\n+            \n+            @Override\n+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException\n+            {\n+                return FileLock.getOsSpecificFileLock( fileName, channel );\n+            }\n         };\n     }\n+    \n+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )\n+    {\n+        return DefaultLogBufferFactory.create( config );\n+    }\n }\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java\nindex 5f18875c8d9..abf36792d62 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java\n@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;\n import org.neo4j.kernel.impl.persistence.PersistenceModule;\n import org.neo4j.kernel.impl.transaction.LockManager;\n import org.neo4j.kernel.impl.transaction.TxModule;\n+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;\n \n /**\n@@ -111,7 +112,8 @@ public class Config\n             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,\n             TxEventSyncHookFactory txSyncHookFactory,\n             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,\n-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )\n+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,\n+            LogBufferFactory logBufferFactory )\n     {\n         this.storeDir = storeDir;\n         this.inputParams = inputParams;\n@@ -129,6 +131,7 @@ public class Config\n         this.syncHookFactory = txSyncHookFactory;\n         this.persistenceModule = new PersistenceModule();\n         this.cacheManager = new AdaptiveCacheManager();\n+        params.put( LogBufferFactory.class, logBufferFactory );\n         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,\n                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),\n                 readOnly );\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\nindex e48d8343e80..7c6e974f46d 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\n@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl\n         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,\n                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,\n                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),\n-                lastCommittedTxIdSetter, fileSystem );\n+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );\n         graphDbInstance = new GraphDbInstance( storeDir, true, config );\n         this.msgLog = StringLogger.getLogger( storeDir );\n         this.graphDbService = graphDbService;\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\nindex 53e62b027d7..1ad4282b7b5 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\n@@ -23,7 +23,6 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n-import java.nio.channels.FileLock;\n import java.nio.channels.OverlappingFileLockException;\n import java.util.Map;\n import java.util.logging.Logger;\n@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore\n         {\n             if ( (!readOnly || backupSlave) && grabFileLock )\n             {\n-                this.fileLock = this.fileChannel.tryLock();\n+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );\n                 if ( fileLock == null )\n                 {\n                     throw new IllegalStateException( \"Unable to lock store [\"\n@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore\n                     fileChannel.write( buffer );\n                     fileChannel.truncate( fileChannel.position() );\n                     fileChannel.force( false );\n-                    fileLock.release();\n+                    if ( fileLock != null )\n+                    {\n+                        fileLock.release();\n+                    }\n                     fileChannel.close();\n                     fileChannel = null;\n                     success = true;\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java\nnew file mode 100644\nindex 00000000000..62f3ef72bb7\n--- /dev/null\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java\n@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) 2002-2011 \"Neo Technology,\"\n+ * Network Engine for Objects in Lund AB [http://neotechnology.com]\n+ *\n+ * This file is part of Neo4j.\n+ *\n+ * Neo4j is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.neo4j.kernel.impl.nioneo.store;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.OverlappingFileLockException;\n+\n+import org.neo4j.kernel.Config;\n+\n+public abstract class FileLock\n+{\n+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )\n+    {\n+        if ( lock == null )\n+        {\n+            return null;\n+        }\n+        \n+        return new FileLock()\n+        {\n+            @Override\n+            public void release() throws IOException\n+            {\n+                lock.release();\n+            }\n+        };\n+    }\n+    \n+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )\n+            throws IOException\n+    {\n+        if ( Config.osIsWindows() )\n+        {\n+            // Only grab one lock, say for the \"neostore\" file\n+            if ( fileName.endsWith( \"neostore\" ) )\n+            {\n+                return getWindowsFileLock( new File( fileName ).getParentFile() );\n+            }\n+            \n+            // For the rest just return placebo locks\n+            return new PlaceboFileLock();\n+        }\n+        else\n+        {\n+            return wrapOrNull( channel.tryLock() );\n+        }\n+    }\n+    \n+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException\n+    {\n+        File lockFile = new File( storeDir, \"lock\" );\n+        if ( !lockFile.exists() )\n+        {\n+            if ( !lockFile.createNewFile() )\n+            {\n+                throw new IOException( \"Couldn't create lock file \" + lockFile.getAbsolutePath() );\n+            }\n+        }\n+        FileChannel fileChannel = new RandomAccessFile( lockFile, \"rw\" ).getChannel();\n+        java.nio.channels.FileLock fileChannelLock = null;\n+        try\n+        {\n+            fileChannelLock = fileChannel.tryLock(); \n+        }\n+        catch ( OverlappingFileLockException e )\n+        {\n+            // OK, let fileChannelLock continue to be null and we'll deal with it below\n+        }\n+        if ( fileChannelLock == null )\n+        {\n+            fileChannel.close();\n+            return null;\n+        }\n+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );\n+    }\n+\n+    public abstract void release() throws IOException;\n+    \n+    private static class PlaceboFileLock extends FileLock\n+    {\n+        @Override\n+        public void release() throws IOException\n+        {\n+        }\n+    }\n+    \n+    private static class WindowsFileLock extends FileLock\n+    {\n+        private final File lockFile;\n+        private final FileChannel fileChannel;\n+        private final java.nio.channels.FileLock fileChannelLock;\n+\n+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )\n+                throws IOException\n+        {\n+            this.lockFile = lockFile;\n+            this.fileChannel = fileChannel;\n+            this.fileChannelLock",